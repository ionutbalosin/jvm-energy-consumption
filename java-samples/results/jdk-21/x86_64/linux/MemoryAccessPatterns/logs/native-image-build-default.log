[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for jvm.energy.consumption:java-samples:jar:1.0.0-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ jvm.energy.consumption:jvm-energy-consumption:1.0.0-SNAPSHOT, /home/ionutbalosin/Workspace/jvm-energy-consumption/pom.xml, line 48, column 21
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] Found GraalVM installation from JAVA_HOME variable.
[INFO] 
[INFO] ----------------< jvm.energy.consumption:java-samples >-----------------
[INFO] Building JVM Energy Consumption Java Samples 1.0.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ java-samples ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ java-samples ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- spotless-maven-plugin:2.42.0:apply (default) @ java-samples ---
[INFO] Spotless.Java is keeping 7 files clean - 0 were changed to be clean, 0 were already clean, 7 were skipped because caching determined they were already clean
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ java-samples ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ java-samples ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ java-samples ---
[INFO] No tests to run.
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:merge-agent-files (test-native) @ java-samples ---
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:test (test-native) @ java-samples ---
[INFO] Skipped native-image tests since there are no test classes.
[INFO] 
[INFO] --- maven-jar-plugin:3.3.0:jar (default-jar) @ java-samples ---
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:merge-agent-files (build-native) @ java-samples ---
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:build (build-native) @ java-samples ---
[WARNING] 'native:build' goal is deprecated. Use 'native:compile-no-fork' instead.
[INFO] Executing: /usr/lib/jvm/graalvm-jdk-21.0.1+12.1/bin/native-image -cp /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/java-samples-1.0.0-SNAPSHOT.jar --no-fallback -o /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/MemoryAccessPatterns -H:DashboardDump=fortune -H:+DashboardAll --enable-preview com.ionutbalosin.jvm.energy.consumption.MemoryAccessPatterns
Warning: The option '-H:DashboardDump=fortune' is experimental and must be enabled via '-H:+UnlockExperimentalVMOptions' in the future.
Warning: The option '-H:+DashboardAll' is experimental and must be enabled via '-H:+UnlockExperimentalVMOptions' in the future.
Warning: Please re-evaluate whether any experimental option is required, and either remove or unlock it. The build output lists all active experimental options, including where they come from and possible alternatives. If you think an experimental option should be considered as stable, please file an issue.
========================================================================================================================
GraalVM Native Image: Generating 'MemoryAccessPatterns' (executable)...
========================================================================================================================
For detailed information and explanations on the build output, visit:
https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md
------------------------------------------------------------------------------------------------------------------------
# Printing Dashboard BGV dump header to: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/fortune.bgv
[1/8] Initializing...                                                                                    (2.8s @ 0.17GB)
 Java version: 21.0.1+12, vendor version: Oracle GraalVM 21.0.1+12.1
 Graal compiler: optimization level: 2, target machine: x86-64-v3, PGO: ML-inferred
 C compiler: gcc (linux, x86_64, 13.2.0)
 Garbage collector: Serial GC (max heap size: 80% of RAM)
 1 user-specific feature(s):
 - com.oracle.svm.thirdparty.gson.GsonFeature
------------------------------------------------------------------------------------------------------------------------
 2 experimental option(s) unlocked:
 - '-H:+DashboardAll' (origin(s): command line)
 - '-H:DashboardDump' (origin(s): command line)
------------------------------------------------------------------------------------------------------------------------
Build resources:
 - 26.49GB of memory (42.4% of 62.50GB system memory, determined at start)
 - 24 thread(s) (100.0% of 24 available processor(s), determined at start)
[2/8] Performing analysis...  [*****]                                                                    (5.6s @ 0.33GB)
    3,317 reachable types   (71.8% of    4,620 total)
    3,922 reachable fields  (49.9% of    7,866 total)
   17,065 reachable methods (47.0% of   36,347 total)
    1,053 types,   112 fields, and   674 methods registered for reflection
       57 types,    55 fields, and    52 methods registered for JNI access
       0 foreign downcalls registered
        4 native libraries: dl, pthread, rt, z
# Printing Dashboard PointsTo analysis BGV dump to: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/fortune.bgv
[3/8] Building universe...                                                                               (1.2s @ 0.48GB)
[4/8] Parsing methods...      [**]                                                                       (3.2s @ 0.36GB)
[5/8] Inlining methods...     [***]                                                                      (0.5s @ 0.32GB)
[6/8] Compiling methods...    [****]                                                                    (13.1s @ 0.52GB)
[7/8] Layouting methods...    [*]                                                                        (1.0s @ 0.56GB)
# Printing Dashboard Code-Breakdown BGV dump to: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/fortune.bgv
# Printing Dashboard Heap-Breakdown BGV dump to: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/fortune.bgv
[8/8] Creating image...       [*]                                                                        (1.0s @ 0.61GB)
   6.82MB (48.36%) for code area:     8,745 compilation units
   6.61MB (46.89%) for image heap:  106,609 objects and 47 resources
 685.77kB ( 4.75%) for other data
  14.10MB in total
------------------------------------------------------------------------------------------------------------------------
Top 10 origins of code area:                                Top 10 object types in image heap:
   4.84MB java.base                                            1.78MB byte[] for code metadata
   1.46MB svm.jar (Native Image)                               1.31MB byte[] for java.lang.String
 143.78kB java.logging                                       782.81kB java.lang.String
 128.03kB com.oracle.svm.svm_enterprise                      561.80kB java.lang.Class
  42.09kB jdk.proxy1                                         277.90kB byte[] for general heap data
  41.55kB jdk.proxy3                                         240.47kB java.util.HashMap$Node
  29.58kB org.graalvm.nativeimage.base                       170.52kB byte[] for reflection metadata
  28.88kB org.graalvm.collections                            155.48kB com.oracle.svm.core.hub.DynamicHubCompanion
  21.54kB jdk.internal.vm.ci                                 154.34kB byte[] for embedded resources
  17.09kB jdk.internal.vm.compiler                           145.88kB char[]
  21.78kB for 5 more packages                                  1.09MB for 912 more object types
                              Use '-H:+BuildReport' to create a report with more details.
------------------------------------------------------------------------------------------------------------------------
Security report:
 - Binary includes Java deserialization.
 - Use '--enable-sbom' to embed a Software Bill of Materials (SBOM) in the binary.
------------------------------------------------------------------------------------------------------------------------
Recommendations:
 G1GC: Use the G1 GC ('--gc=G1') for improved latency and throughput.
 PGO:  Use Profile-Guided Optimizations ('--pgo') for improved throughput.
 INIT: Adopt '--strict-image-heap' to prepare for the next GraalVM release.
 HEAP: Set max heap for improved and more predictable memory usage.
 CPU:  Enable more CPU features with '-march=native' for improved performance.
Print of Dashboard dump output ended.
------------------------------------------------------------------------------------------------------------------------
                       2.0s (6.6% of total time) in 362 GCs | Peak RSS: 1.29GB | CPU load: 16.37
------------------------------------------------------------------------------------------------------------------------
Produced artifacts:
 /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/MemoryAccessPatterns (executable)
========================================================================================================================
Finished generating 'MemoryAccessPatterns' in 30.6s.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  32.977 s
[INFO] Finished at: 2024-03-03T21:20:10+01:00
[INFO] ------------------------------------------------------------------------
