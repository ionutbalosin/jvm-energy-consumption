[INFO] Scanning for projects...
[INFO] Found GraalVM installation from JAVA_HOME variable.
[INFO] 
[INFO] ----------------< jvm.energy.consumption:java-samples >-----------------
[INFO] Building JVM Energy Consumption Java Samples 1.0.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ java-samples ---
[INFO] Deleting /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ java-samples ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.12.1:compile (default-compile) @ java-samples ---
[INFO] Recompiling the module because of changed source code.
[INFO] Compiling 7 source files with javac [debug target 21] to target/classes
[INFO] /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/main/java/com/ionutbalosin/jvm/energy/consumption/StringConcatenationPatterns.java: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/main/java/com/ionutbalosin/jvm/energy/consumption/StringConcatenationPatterns.java uses preview features of Java SE 21.
[INFO] /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/main/java/com/ionutbalosin/jvm/energy/consumption/StringConcatenationPatterns.java: Recompile with -Xlint:preview for details.
[INFO] 
[INFO] --- spotless-maven-plugin:2.42.0:apply (default) @ java-samples ---
[INFO] Index file does not exist. Fallback to an empty index
[INFO] Spotless.Java is keeping 7 files clean - 0 were changed to be clean, 7 were already clean, 0 were skipped because caching determined they were already clean
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ java-samples ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.12.1:testCompile (default-testCompile) @ java-samples ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ java-samples ---
[INFO] No tests to run.
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:merge-agent-files (test-native) @ java-samples ---
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:test (test-native) @ java-samples ---
[INFO] Skipped native-image tests since there are no test classes.
[INFO] 
[INFO] --- maven-jar-plugin:3.3.0:jar (default-jar) @ java-samples ---
[INFO] Building jar: /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/undefined.jar
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:merge-agent-files (build-native) @ java-samples ---
[INFO] 
[INFO] --- native-maven-plugin:0.10.1:build (build-native) @ java-samples ---
[WARNING] 'native:build' goal is deprecated. Use 'native:compile-no-fork' instead.
[INFO] Downloaded GraalVM reachability metadata repository from file:/home/ionutbalosin/.m2/repository/org/graalvm/buildtools/graalvm-reachability-metadata/0.10.1/graalvm-reachability-metadata-0.10.1-repository.zip
[INFO] Executing: /usr/lib/jvm/graalvm-jdk-21.0.1+12.1/bin/native-image -cp /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/undefined.jar --no-fallback -o /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/VPThreadQueueThroughput-virtual --enable-preview com.ionutbalosin.jvm.energy.consumption.VPThreadQueueThroughput
========================================================================================================================
GraalVM Native Image: Generating 'VPThreadQueueThroughput-virtual' (executable)...
========================================================================================================================
For detailed information and explanations on the build output, visit:
https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md
------------------------------------------------------------------------------------------------------------------------
[1/8] Initializing...                                                                                    (2.1s @ 0.16GB)
 Java version: 21.0.1+12, vendor version: Oracle GraalVM 21.0.1+12.1
 Graal compiler: optimization level: 2, target machine: x86-64-v3, PGO: ML-inferred
 C compiler: gcc (linux, x86_64, 13.2.0)
 Garbage collector: Serial GC (max heap size: 80% of RAM)
 1 user-specific feature(s):
 - com.oracle.svm.thirdparty.gson.GsonFeature
------------------------------------------------------------------------------------------------------------------------
Build resources:
 - 26.49GB of memory (42.4% of 62.50GB system memory, determined at start)
 - 24 thread(s) (100.0% of 24 available processor(s), determined at start)
[2/8] Performing analysis...  [*****]                                                                    (5.8s @ 0.31GB)
    3,387 reachable types   (72.3% of    4,687 total)
    4,066 reachable fields  (50.6% of    8,043 total)
   17,501 reachable methods (47.5% of   36,874 total)
    1,072 types,   112 fields, and   676 methods registered for reflection
       57 types,    55 fields, and    52 methods registered for JNI access
       0 foreign downcalls registered
        4 native libraries: dl, pthread, rt, z
[3/8] Building universe...                                                                               (1.1s @ 0.42GB)
[4/8] Parsing methods...      [**]                                                                       (3.1s @ 0.45GB)
[5/8] Inlining methods...     [***]                                                                      (0.6s @ 0.27GB)
[6/8] Compiling methods...    [****]                                                                    (14.8s @ 0.37GB)
[7/8] Layouting methods...    [*]                                                                        (0.9s @ 0.43GB)
[8/8] Creating image...       [*]                                                                        (0.9s @ 0.48GB)
   7.03MB (47.24%) for code area:     9,030 compilation units
   7.16MB (48.17%) for image heap:  107,761 objects and 47 resources
 699.80kB ( 4.59%) for other data
  14.87MB in total
------------------------------------------------------------------------------------------------------------------------
Top 10 origins of code area:                                Top 10 object types in image heap:
   5.02MB java.base                                            1.84MB byte[] for code metadata
   1.47MB svm.jar (Native Image)                               1.33MB byte[] for java.lang.String
 143.25kB java.logging                                       792.68kB java.lang.String
 127.30kB com.oracle.svm.svm_enterprise                      574.52kB java.lang.Class
  42.09kB jdk.proxy1                                         482.76kB heap alignment
  41.55kB jdk.proxy3                                         278.09kB byte[] for general heap data
  29.64kB org.graalvm.nativeimage.base                       240.47kB java.util.HashMap$Node
  28.88kB org.graalvm.collections                            173.99kB byte[] for reflection metadata
  21.54kB jdk.internal.vm.ci                                 158.77kB com.oracle.svm.core.hub.DynamicHubCompanion
  20.51kB undefined.jar                                      154.34kB byte[] for embedded resources
  31.17kB for 5 more packages                                  1.21MB for 935 more object types
                              Use '-H:+BuildReport' to create a report with more details.
------------------------------------------------------------------------------------------------------------------------
Security report:
 - Binary includes Java deserialization.
 - Use '--enable-sbom' to embed a Software Bill of Materials (SBOM) in the binary.
------------------------------------------------------------------------------------------------------------------------
Recommendations:
 G1GC: Use the G1 GC ('--gc=G1') for improved latency and throughput.
 PGO:  Use Profile-Guided Optimizations ('--pgo') for improved throughput.
 INIT: Adopt '--strict-image-heap' to prepare for the next GraalVM release.
 HEAP: Set max heap for improved and more predictable memory usage.
 CPU:  Enable more CPU features with '-march=native' for improved performance.
------------------------------------------------------------------------------------------------------------------------
                       1.9s (6.3% of total time) in 336 GCs | Peak RSS: 1.38GB | CPU load: 17.66
------------------------------------------------------------------------------------------------------------------------
Produced artifacts:
 /home/ionutbalosin/Workspace/jvm-energy-consumption/java-samples/target/VPThreadQueueThroughput-virtual (executable)
========================================================================================================================
Finished generating 'VPThreadQueueThroughput-virtual' in 29.7s.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  32.425 s
[INFO] Finished at: 2024-03-16T04:51:32+01:00
[INFO] ------------------------------------------------------------------------
